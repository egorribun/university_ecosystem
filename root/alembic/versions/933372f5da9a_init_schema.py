"""init schema

Revision ID: 933372f5da9a
Revises: bd67902ca2cd
Create Date: 2025-09-21 17:48:53.212386

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "933372f5da9a"
down_revision: Union[str, None] = "bd67902ca2cd"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "event_attendance", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "event_attendance", "event_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_index(
        op.f("ix_event_attendance_event_id"),
        "event_attendance",
        ["event_id"],
        unique=False,
    )
    op.create_index(
        "ix_event_attendance_event_user",
        "event_attendance",
        ["event_id", "user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_event_attendance_registered_at"),
        "event_attendance",
        ["registered_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_event_attendance_user_id"),
        "event_attendance",
        ["user_id"],
        unique=False,
    )
    op.create_unique_constraint(
        "uq_event_attendance_user_event", "event_attendance", ["user_id", "event_id"]
    )
    op.alter_column(
        "event_files", "event_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_index(
        op.f("ix_event_files_event_id"), "event_files", ["event_id"], unique=False
    )
    op.create_index(
        op.f("ix_events_created_at"), "events", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_events_ends_at"), "events", ["ends_at"], unique=False)
    op.create_index(
        op.f("ix_events_event_type"), "events", ["event_type"], unique=False
    )
    op.create_index(op.f("ix_events_is_active"), "events", ["is_active"], unique=False)
    op.create_index(op.f("ix_events_starts_at"), "events", ["starts_at"], unique=False)
    op.drop_constraint(op.f("events_created_by_fkey"), "events", type_="foreignkey")
    op.create_foreign_key(
        None, "events", "users", ["created_by"], ["id"], ondelete="CASCADE"
    )
    op.create_index(op.f("ix_groups_name"), "groups", ["name"], unique=False)
    op.drop_constraint(op.f("invite_codes_code_key"), "invite_codes", type_="unique")
    op.create_index(op.f("ix_invite_codes_code"), "invite_codes", ["code"], unique=True)
    op.create_index(
        op.f("ix_invite_codes_created_at"), "invite_codes", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_invite_codes_is_active"), "invite_codes", ["is_active"], unique=False
    )
    op.create_index(
        op.f("ix_invite_codes_is_used"), "invite_codes", ["is_used"], unique=False
    )
    op.create_index(op.f("ix_news_created_at"), "news", ["created_at"], unique=False)
    op.add_column("notifications", sa.Column("read_at", sa.DateTime(), nullable=True))
    op.create_index(
        "ix_notifications_dupe_check",
        "notifications",
        ["user_id", "title", "url", "created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notifications_read_at"), "notifications", ["read_at"], unique=False
    )
    op.create_index(
        "ix_notifications_user_created",
        "notifications",
        ["user_id", "created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_password_reset_tokens_created_at"),
        "password_reset_tokens",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_password_reset_tokens_used"),
        "password_reset_tokens",
        ["used"],
        unique=False,
    )
    op.alter_column("schedule", "group_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("schedule", "subject", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("schedule", "weekday", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "schedule", "start_time", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "schedule", "end_time", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.create_index(
        op.f("ix_schedule_end_time"), "schedule", ["end_time"], unique=False
    )
    op.create_index(
        op.f("ix_schedule_group_id"), "schedule", ["group_id"], unique=False
    )
    op.create_index(
        "ix_schedule_group_start_time",
        "schedule",
        ["group_id", "start_time"],
        unique=False,
    )
    op.create_index(op.f("ix_schedule_parity"), "schedule", ["parity"], unique=False)
    op.create_index(
        op.f("ix_schedule_start_time"), "schedule", ["start_time"], unique=False
    )
    op.create_index(op.f("ix_schedule_weekday"), "schedule", ["weekday"], unique=False)
    op.drop_constraint(op.f("schedule_group_id_fkey"), "schedule", type_="foreignkey")
    op.create_foreign_key(
        None, "schedule", "groups", ["group_id"], ["id"], ondelete="CASCADE"
    )
    op.alter_column(
        "users",
        "spotify_access_token",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_refresh_token",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_token_expires_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_scope",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_last_checked_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_last_track_url",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_last_album_image_url",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.drop_index(op.f("uq_users_spotify_user_id"), table_name="users")
    op.create_index(op.f("ix_users_is_active"), "users", ["is_active"], unique=False)
    op.create_index(op.f("ix_users_role"), "users", ["role"], unique=False)
    op.create_index(
        op.f("ix_users_spotify_last_track_id"),
        "users",
        ["spotify_last_track_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_users_spotify_token_expires_at"),
        "users",
        ["spotify_token_expires_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_users_spotify_user_id"), "users", ["spotify_user_id"], unique=True
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_spotify_user_id"), table_name="users")
    op.drop_index(op.f("ix_users_spotify_token_expires_at"), table_name="users")
    op.drop_index(op.f("ix_users_spotify_last_track_id"), table_name="users")
    op.drop_index(op.f("ix_users_role"), table_name="users")
    op.drop_index(op.f("ix_users_is_active"), table_name="users")
    op.create_index(
        op.f("uq_users_spotify_user_id"), "users", ["spotify_user_id"], unique=True
    )
    op.alter_column(
        "users",
        "spotify_last_album_image_url",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_last_track_url",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_last_checked_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_scope",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_token_expires_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_refresh_token",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "spotify_access_token",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.drop_constraint(None, "schedule", type_="foreignkey")
    op.create_foreign_key(
        op.f("schedule_group_id_fkey"), "schedule", "groups", ["group_id"], ["id"]
    )
    op.drop_index(op.f("ix_schedule_weekday"), table_name="schedule")
    op.drop_index(op.f("ix_schedule_start_time"), table_name="schedule")
    op.drop_index(op.f("ix_schedule_parity"), table_name="schedule")
    op.drop_index("ix_schedule_group_start_time", table_name="schedule")
    op.drop_index(op.f("ix_schedule_group_id"), table_name="schedule")
    op.drop_index(op.f("ix_schedule_end_time"), table_name="schedule")
    op.alter_column(
        "schedule", "end_time", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "schedule", "start_time", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column("schedule", "weekday", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("schedule", "subject", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("schedule", "group_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_index(
        op.f("ix_password_reset_tokens_used"), table_name="password_reset_tokens"
    )
    op.drop_index(
        op.f("ix_password_reset_tokens_created_at"), table_name="password_reset_tokens"
    )
    op.drop_index("ix_notifications_user_created", table_name="notifications")
    op.drop_index(op.f("ix_notifications_read_at"), table_name="notifications")
    op.drop_index("ix_notifications_dupe_check", table_name="notifications")
    op.drop_column("notifications", "read_at")
    op.drop_index(op.f("ix_news_created_at"), table_name="news")
    op.drop_index(op.f("ix_invite_codes_is_used"), table_name="invite_codes")
    op.drop_index(op.f("ix_invite_codes_is_active"), table_name="invite_codes")
    op.drop_index(op.f("ix_invite_codes_created_at"), table_name="invite_codes")
    op.drop_index(op.f("ix_invite_codes_code"), table_name="invite_codes")
    op.create_unique_constraint(op.f("invite_codes_code_key"), "invite_codes", ["code"])
    op.drop_index(op.f("ix_groups_name"), table_name="groups")
    op.drop_constraint(None, "events", type_="foreignkey")
    op.create_foreign_key(
        op.f("events_created_by_fkey"),
        "events",
        "users",
        ["created_by"],
        ["id"],
        ondelete="SET NULL",
    )
    op.drop_index(op.f("ix_events_starts_at"), table_name="events")
    op.drop_index(op.f("ix_events_is_active"), table_name="events")
    op.drop_index(op.f("ix_events_event_type"), table_name="events")
    op.drop_index(op.f("ix_events_ends_at"), table_name="events")
    op.drop_index(op.f("ix_events_created_at"), table_name="events")
    op.drop_index(op.f("ix_event_files_event_id"), table_name="event_files")
    op.alter_column(
        "event_files", "event_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_constraint(
        "uq_event_attendance_user_event", "event_attendance", type_="unique"
    )
    op.drop_index(op.f("ix_event_attendance_user_id"), table_name="event_attendance")
    op.drop_index(
        op.f("ix_event_attendance_registered_at"), table_name="event_attendance"
    )
    op.drop_index("ix_event_attendance_event_user", table_name="event_attendance")
    op.drop_index(op.f("ix_event_attendance_event_id"), table_name="event_attendance")
    op.alter_column(
        "event_attendance", "event_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "event_attendance", "user_id", existing_type=sa.INTEGER(), nullable=True
    )
    # ### end Alembic commands ###
